PUPPET ROLES AND HIERA PARAMETERS HIERARCHY

This is a design pattern to implement roles like Chef and to separate class parameters into 
a parameter hierachy also like chef.

The roles can be either set on the individual server or on the puppetmaster master in the hieradata for the node. 
If set in the puppetmaster hierdata this takes precedence. 

This will work with both masterless puppet (ie puppet apply command) or with a puppet master (ie puppet agent command)

SETTING THE ROLES
 On the individual server set the Facter variable role_name1 to role_name4. For example:
  export FACTER_role_name1=base
  export FACTER_role_name2=webserver 
 On the puppetmaster set the roles in the nodes\<hostname>.yaml file using values role::role_name1 to role::role_name4 
 For example file hieradata/nodes/ubuntu-server.yaml contains
    ---
    role::role_name1:  'webserver'

MODULE CALLING 
 This will result in either calls the role::role_nameX class
 or
  if the prefix parameter is set then it will call directly the init.pp class of the module for the role called prefix-role. 

MODULE NAMING
 There should be a separation of library modules from custom modules or classes.  
 This allow a design pattern for modules where custom modules have a prefix (typically companyname) 
 This separates them from standard library modules that can be specified using puppet librarian or downloaded 
 from puppetforge or github which should then NOT be customized.

ROLE ORDERING
 We will always run the base role first but by default the other roles are run by puppet IN ANY ORDER.
 If you want the other roles run add to the puppet command the option   --ordering=manifest 
  
RESOVLING CLASS PARAMETERS 
 Parameters for role can be set in the hier hierarchy.
 They can be resolved from the hier <environment>/role/<role_name>.yaml and the role/<role_name>.yaml
 This allows values to be set for the particular environment.
 Also common parameters can be set in the common.yaml file which can also be specifed by environment.

ADDITIONAL FILES REQUIRED 
1. hiera.yaml
---
:backends:
  - yaml
:yaml:
  :datadir: /mypuppet_repo_dir/hieradata
:hierarchy:
  - "nodes/%{::hostname}"
  - "%{::environment}/roles/%{role_name1}"
  - "%{::environment}/roles/%{role_name2}"
  - "%{::environment}/roles/%{role_name3}"
  - "%{::environment}/roles/%{role_name4}" 
  - "%{::environment}/common"  
  - "roles/%{role_name1}"
  - "roles/%{role_name2}"
  - "roles/%{role_name3}"
  - "roles/%{role_name4}"	
  - common 
  
2. site.pp (or whatever the initial manifest file is called)
#
#  Call Modules and Classes based on up to 4 roles 
#
#  If the prefix parameter is set then it will go directly to the module for the role.
#  This allow a design pattern for modules where custom modules have a prefix (typically companyname) 
#  This separates them from standard library modules downloaded from puppetforge which should not be customized.
#  
#  Otherwise it will call the class in the role module first. i.e. role::<role_name>
#  
#  For example:
#   If prefix is set to mycompany 
#        it will go directly to the mycompany-base  module and runthe init class
#   Otherwise it will call the class role::base      
#
node default {
 Exec {
     path => ["/bin", "/sbin", "/usr/bin", "/usr/sbin"],
  }
     # check if roles defined in node hostname hiera file.
     $hiera_role1 = hiera('role::role_name1','')
     if $hiera_role1 != '' {
        notify {"*** Found heira role::role_name1 value ${hiera_role1} ignoring all facter role values ***": }
	    $role_name1 = hiera('role::role_name1','')
        $role_name2 = hiera('role::role_name2','')
        $role_name3 = hiera('role::role_name3','')
  	    $role_name4 = hiera('role::role_name4','')
	 }	
     class { 'role': }
	# Or to do Direct Module Prefix 
	#class { 'role' : prefix => 'mycompany' } 
 }    
  
TESTING 
This can be tested by running in masterless puppet
  
    export FACTER_role_name1=base
    export FACTER_role_name2=webserver
    puppet apply --modulepath ./modules manifests/site.pp

also an environment can be specified on the puppet apply command so that parameters values for different environments
can be resolved from the hiera data.  
	
This will also be able to run in puppet master:
   if the hostname is ubuntu-server set the roles in the hiera file hieradata/nodes/ubuntu-server.yaml on the puppetmaster
    ---
    role::role_name1:  'base'  
	role::role_name2:  'webserver' 
   then run
    puppet agent -t --servername=puppetmaster.mycompany.com -v -d  
