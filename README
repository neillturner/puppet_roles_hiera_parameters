# Puppet Roles and Hiera Parameter Hierachy

This is a design pattern to implement roles like Chef and to separate class parameters into 
a parameter hierachy also like chef.

Set up to 4 role_names in Facter for the server.
 -set up to 4 role_names in Facter 
 -the role class gets called from the site.pp 
 -the role::<role_name> classes called for each role and the classes executed
 (or a direct module prefix can be specified to call directly the prefix-<role_name> module
 -the class parameters are resolved in the hiera hierachy:
 
       nodes/%{hostname}
       roles/%{role_name1}
       roles/%{role_name2}
       roles/%{role_name3}
       roles/%{role_name4}
       modules/%{module_name}
       common 
	   
 -role parameters can be stored in the roles/%{role_name} and can be overriden for parameter 
values for the node,roles, module or common. parameters that are common to all roles can be stored in the common file  

TESTING 
This can be tested by running in masterless puppet
  
    export FACTER_role_name1=base
    export FACTER_role_name2=webserver
    puppet apply --modulepath ./modules manifests/site.pp
	
This will also be able to run in puppet master, just need to decide how to set the  FACTER_role_nameX
    export FACTER_role_name1=`echo base`
    export FACTER_role_name2=`echo webserver`
    puppet agent -t --servername=puppetmaster.mycompany.com -v -d  
 


EXAMPLE MANIFEST site.pp

  If the prefix parameter is set then it will go directly to the module for the role.
  This allow a design pattern for modules where custom modules have a prefix (typically companyname) 
  This separates them from standard library modules downloaded from puppetforge which should not be customized.
  
  Otherwise it will call the class in the role module first. i.e. role::<role_name>
  
  For example:
   If prefix is set to mycompany 
        it will go directly to the mycompany-base  module and runthe init class
   Otherwise it will call the class role::base      

 node default {
 Exec {
     path => ["/bin", "/sbin", "/usr/bin", "/usr/sbin"],
  }
    class { 'role' : prefix => 'mycompany' } 
  OR JUST 
    class { 'role' }
 } 
 
 CONFIGURATION FILE   hiera.yaml 
 
 ---
:backends:
  - yaml
:yaml:
  :datadir: /var/local/pocketknife/hieradata
:hierarchy:
  - "nodes/%{hostname}"
  - "roles/%{role_name1}"
  - "roles/%{role_name2}"
  - "roles/%{role_name3}"
  - "roles/%{role_name4}"
  - "modules/%{module_name}"
  - common
  